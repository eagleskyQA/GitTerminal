pwd - мое текущее расположение
mkdir - создание папки
cd - выход в корневую папку
cd "название папки" - переход к нужной папке
cd .. - переход на уровень выше
clear - очистить консоль

find - список всех файлов в папке
find -name "тут имя файла" - найти файл по имени
find | grep "тут часть имени файла, который мы хотим найти"
find | grep -i "то же самое, только без учета регистра"

grep "текст, который хотим найти в файле" "название файла"
grep "текст" * - поиск строк в текущей па
Опции:
-L - отобразить только имена файлов, в которых НЕ найден шаблон;
-l - отобразить только имена файлов, в которых найден шаблон;
-i - не учитывать регистр;
-v - инвертировать поиск, выдавать все строки кроме тех, что содержат шаблон;
-r - рекурсивный поиск;
-w - искать шаблон как слово, окружённое пробелами (целое слово, а не часть);

ls -la - просмотр информации о папках и файлах внутри текущей папки в столбик
ls -la "название папки" - просмотр информации о папках и файлах внутри указанной папки в столбик
ls - просмотр папок и файлов в текущей папки без подробной инфы

touch - создание файла без дальнейшего редактирования

cat - просмотр данных в файле
cat > создание/замена файла с редактированием
cat >> добавление данных в файл
:> - очистить содержимое файла, не удаляя его

mv - переместить файл/переименовать файл
cp - скопировать файл
rm - удалить файл
rm -r - удалить папку со всеми файлами в ней
rmdir - удалить пустую папку

history - история использованных комманд

vim "название файла" - текстовый редактор в терминале
i - режим редактирования
esc - выйти из режима редактирования
:wq - выйти из vim и сохранить изменения
:q - выход без сохранения

head - показать первые 10 строк файла
head -n "количество" - выводить указанное количество строк с начала файла

tail - вывести последние 10 строк файла
tail -f - обновлять информацию по мере появления новых строк в файле
tail -n "количество" - выводить указанное количество строк из конца файла

less - открыть файл в режиме чтения длинных файлов

date - текущее время и дата на компьютере

curl - отправить http запрос

| xargs - перенаправить вывод от одной команды на выполнение другой команды

git clone "тут ссылка на репозиторий из веба" - скопировать репозиторий на локальную машину
git status - проверить, какие файлы не добавлены в систему гит
git add . - добавить все файлы в текущей папке в систему коммитов гит
git add "Название файла" - добавить конкретный файл в систему коммитов гит
git commit -m - добавить описание изменений в коммите
git commit -am "тут сообщение" - сразу добавить под гит исправленный файл и закоммитить
git push - добавить все изменения в облако git
git fetch - показывает, есть ли какие то изменения в репозитории
git pull - добавить изменения с внешнего репозитория на локальный
git push -u origin "название ветки" - присоединить ветку на внешнем репозитории
git push origin --all - запушить все локальные ветки на внешний репозиторий
git push --set-upstream origin "тут название привязываемой ветки" - привязать текущую ветку к внешнему репозиторию. Это нужно после создания веток командами "git checkout -b "тут название новой ветки"" и "git push origin --all"

git branch - показать ветки
git branch "тут название новой ветки" - создать новую ветку
git checkout -b "тут название новой ветки" - создать новую ветку и сразу перейти в неё
git checkout "тут навзвание ветки"
 - перейти в ветку (уже существующую)
git merge "тут ветка, которую мы хотим вмерджить" -m "тут сообщение"


git config --global user.name "тут имя пользователя"
git config --global user.email "тут почта пользователя" - так пишутся данные для смены локального пользователя